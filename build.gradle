buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven {  url = 'https://repo.spongepowered.org/repository/maven-public'}
        jcenter()
        mavenCentral()
        maven {
            name = "TimeConqueror's Maven"
            url = "https://repo.repsy.io/mvn/timeconqueror/mc/"
        }
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.31"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: 'org.spongepowered.mixin'


version = '0.17.25b'
group = 'com.rumaruka.riskofmine'
archivesBaseName = 'riskofmine'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
repositories {
    mavenLocal()
    maven {
        name = "TimeConqueror's Maven"
        url = "https://repo.repsy.io/mvn/timeconqueror/mc/"
    }
    maven {
        name = "Curios"
        url = "https://maven.theillusivec4.top/"
    }

    maven {
        // location of a maven that hosts all files on CurseForge
        name 'CurseMaven'
        url 'https://www.cursemaven.com/'
    }
    maven { url = "https://dvs1.progwml6.com/files/maven" }
    mavenCentral()
}
minecraft {

    mappings channel: 'parchment', version: '2022.03.06-1.16.5'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    def jvmArgs = Arrays.asList('-Dmixin.env.disableRefMap=true'.split(' '))
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            setJvmArgs(jvmArgs)
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            args '--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker', '--mixin', 'riskofmine.mixin.json'
            mods {
                riskofmine {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            setJvmArgs(jvmArgs)
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            args '--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker', '--mixin', 'riskofmine.mixin.json'
            mods {
                riskofmine {
                    source sourceSets.main
                }
            }

        }

        data {
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.disableRefMap', 'true'
            ideaModule "${project.name}.main"
            workingDirectory project.file('run')
            forceExit false
            args '--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker', '--mixin', 'riskofmine.mixin.json'
            mods {
                riskofmine {
                    source sourceSets.main
                }
            }
            args '--mod', 'riskofmine', '--all', '--output', file('src/generated/resources/'),
                    '--existing', sourceSets.main.resources.srcDirs[0]
            environment 'target', 'fmluserdevdata'
        }

    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}
dependencies {

    minecraft 'net.minecraftforge:forge:1.16.5-36.2.23'

    implementation fg.deobf('ru.timeconqueror:TimeCore:1.16.5-3.4.1.0.build17:dev')


    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.0")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.0:api")

    compileOnly fg.deobf("mezz.jei:jei-1.16.5:7.6.1.75:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.6.1.75")

    implementation fg.deobf("curse.maven:just-enough-resources-jer-240630:3336760") // JER

    compile fg.deobf('curse.maven:catalogue-459701:3399554')
    compile fg.deobf('curse.maven:configured-457570:3434071')




    //System Dependencies

    implementation 'org.jetbrains:annotations:23.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation  "org.jetbrains.kotlin:kotlin-reflect"
    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
    testAnnotationProcessor 'org.spongepowered:mixin:0.8.2:processor'

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "riskofmine",
                "Specification-Vendor": "Rumaruka",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"examplemodsareus",
                "FMLCorePluginContainsFMLMod": "true",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
